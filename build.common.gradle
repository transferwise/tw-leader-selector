import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'checkstyle'
apply plugin: 'com.github.spotbugs'

apply from: "${project.rootDir}/build.libraries.gradle"

group = 'com.transferwise.common'

java {
    if (springBootVersion.startsWith("3.")){
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17   
    }
    else {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": projectName,
                "Implementation-Version": archiveVersion
        )
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    annotationProcessor platform(libraries.springBootDependencies)
    implementation platform(libraries.springBootDependencies)
    compileOnly platform(libraries.springBootDependencies)
    testAnnotationProcessor platform(libraries.springBootDependencies)

    spotbugsPlugins libraries.findSecBugsPlugin

    annotationProcessor libraries.lombok
    annotationProcessor libraries.springBootConfigurationProcessor
   
    compileOnly libraries.lombok
    compileOnly libraries.spotbugsAnnotations

    testAnnotationProcessor libraries.lombok
    testCompileOnly libraries.lombok
    testCompileOnly libraries.spotbugsAnnotations
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    all {
        exclude module: 'slf4j-log4j12'
    }
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

spotbugs {
    effort = "max"
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"

    excludeFilter = file('../spotbugs-exclude.xml')

    reports {
        xml.required = true
        html.required = true
    }
}

spotbugsTest {
    enabled = false
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}

yamlValidator {
    searchPaths = ['src']
    allowDuplicates = false
    searchRecursive = true
}

