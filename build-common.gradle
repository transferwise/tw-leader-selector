import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply from: "${project.rootDir}/build.libraries.gradle"

apply plugin: 'checkstyle'
apply plugin: 'com.github.spotbugs'

group = 'com.transferwise.common'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": projectName,
                "Implementation-Version": archiveVersion
        )
    }
}

dependencies {
    annotationProcessor platform(libraries.springBootDependencies)
    implementation platform(libraries.springBootDependencies)
    compileOnly platform(libraries.springBootDependencies)
    testAnnotationProcessor platform(libraries.springBootDependencies)

    spotbugsPlugins libraries.findSecBugsPlugin

    annotationProcessor libraries.lombok
    annotationProcessor libraries.springBootConfigurationProcessor
   
    compileOnly libraries.lombok
    compileOnly libraries.spotbugsAnnotations

    testAnnotationProcessor libraries.lombok
    testCompileOnly libraries.lombok
    testCompileOnly libraries.spotbugsAnnotations
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

repositories {
    maven {
        url 'https://arti.tw.ee/artifactory/libs-release'
    }
 
    mavenLocal()
}

configurations {
    all {
        exclude module: 'slf4j-log4j12'
    }
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(15)
    }
    
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

spotbugs {
    effort = "max"
}

spotbugsMain {
    reports {
        html {
            enabled = true
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    enabled = false
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    maxWarnings = 0

    reports {
        xml.enabled false
        html.enabled true
    }
}

yamlValidator {
    searchPaths = ['src']
    allowDuplicates = false
    searchRecursive = true
}

